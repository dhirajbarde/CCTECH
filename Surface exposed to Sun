using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SunExposed
{
    class Program
    {
        static void Main(string[] args)
        {
            double[,] points = new double[4, 2] { { 4, 0 }, { 4, -5 }, { 7, -5 }, { 7, 0 } };
            //double[,] points = new double[12, 2] { { 2, 0 }, { 2, 1 }, { 3, 1 }, { 3, 0 }, { 4, 0 }, { 4, 2 }, { 5, 2 }, { 5, 0 }, { 6, 0 }, {6,3 }, {7,3 }, {7,0 } };
            double[,] search = new double[1, 2] { { 1, 2 } };
            double distance = Calculate(points, search);
        }
        public static double Calculate(double[,] points, double[,] point)
        {
            int n = points.Length / 8;
            double distbtB = 0.0;
            double verDist = 0.0;
            double horiDist = 0.0;
            // calculate angle of inclination of sun
            double xsun = point[0, 0] - points[0, 0];
            double ysun = point[0, 1] - points[1, 1];
            double anglesun = Math.Atan(ysun / xsun);
            for (int i = 1; i < n; i++)
            {
                 distbtB += (points[4*i, 0] - points[4*i-1, 0]) * Math.Tan(anglesun);

            }
            for(int j = n; j <= n; j++)
            {
                verDist = points[4 * j-2, 1] - points[4 * j -1, 1];
            }
            for(int k =1; k <= n; k++)
            {
                horiDist += points[4 * k - 1, 0] - points[4 * k - 3, 0];
            }
            if (distbtB < 0 )
            {
                distbtB = -distbtB;
            }
            if(verDist < 0)
            {
                verDist = -verDist;
            }
            double dist = horiDist + verDist + distbtB;
            return dist;
        }
    }
}
